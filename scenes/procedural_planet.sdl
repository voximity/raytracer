# scene prep
sun { vector: <-0.8, -1, -0.4>, intensity: 0.6 }
camera {
    origin: <2, 2, 2>,
    yaw: -0.25,
    pitch: -0.2
}

# planet settings
let planet_center = <0, 0, -6>
let noise_scale = 1.6
let noise_influence = 0.07

# icosahedron generation
# https://observablehq.com/@mourner/fast-icosphere-mesh

# this is the # of subdivisions to perform
let order = 5

let f = (1 + pow(5, 0.5)) / 2
let T = pow(4, order)

let vertices = [-1, f, 0, 1, f, 0, -1, 0-f, 0, 1, 0-f, 0, 
    0, -1, f, 0, 1, f, 0, -1, 0-f, 0, 1, 0-f, 
    f, 0, -1, f, 0, 1, 0-f, 0, -1, 0-f, 0, 1]
let triangles = [0, 11, 5, 0, 5, 1, 0, 1, 7, 0, 7, 10, 0, 10, 11, 
    11, 10, 2, 5, 11, 4, 1, 5, 9, 7, 1, 8, 10, 7, 6, 
    3, 9, 4, 3, 4, 2, 3, 2, 6, 3, 6, 8, 3, 8, 9, 
    9, 8, 1, 4, 9, 5, 2, 4, 11, 6, 2, 10, 8, 6, 7]

let v = 12
fn add_midpoint(a, b) {
    let key = floor((a + b) * (a + b + 1) / 2) + min(a, b)
    for k in 0 to 3 {
        set(vertices, 3 * v + k, (vertices[3 * a + k] + vertices[3 * b + k]) / 2)
    }
    let i = v
    v = v + 1
    return i
}

let triangles_prev = triangles
for i in 0 to order {
    triangles = []
    for k in 0 to len(triangles_prev) {
        if k % 3 == 0 {
            let v1 = triangles_prev[k]
            let v2 = triangles_prev[k + 1]
            let v3 = triangles_prev[k + 2]
            let a = add_midpoint(v1, v2)
            let b = add_midpoint(v2, v3)
            let c = add_midpoint(v3, v1)
            let t = k * 4
            set(triangles, t, v1) t = t + 1
            set(triangles, t, a) t = t + 1
            set(triangles, t, c) t = t + 1
            set(triangles, t, v2) t = t + 1
            set(triangles, t, b) t = t + 1
            set(triangles, t, a) t = t + 1
            set(triangles, t, v3) t = t + 1
            set(triangles, t, c) t = t + 1
            set(triangles, t, b) t = t + 1
            set(triangles, t, a) t = t + 1
            set(triangles, t, b) t = t + 1
            set(triangles, t, c) t = t + 1
        }
    }
    triangles_prev = triangles
}

# normalize verts + apply noise
for i in 0 to len(vertices) {
    if i % 3 == 0 {
        let v0 = vertices[i]
        let v1 = vertices[i + 1]
        let v2 = vertices[i + 2]
        let noise = perlin(v0 * noise_scale, v1 * noise_scale, v2 * noise_scale) * noise_influence
        let m = 1 / sqrt(pow(vertices[i], 2) + pow(vertices[i + 1], 2) + pow(vertices[i + 2], 2))
        set(vertices, i, vertices[i] * (m + noise))
        set(vertices, i + 1, vertices[i + 1] * (m + noise))
        set(vertices, i + 2, vertices[i + 2] * (m + noise))
    }
}

# convert to mesh verts
let verts = []
for i in 0 to len(triangles) {
    push(verts, <vertices[triangles[i] * 3], vertices[triangles[i] * 3 + 1], vertices[triangles[i] * 3 + 2]>)
}

mesh {
    verts,
    position: planet_center,
    scale: 3,
    material: {
        texture: solid(rgb(40, 180, 40))
    }
}

sphere {
    position: planet_center,
    radius: 2.85,
    material: {
        texture: solid(rgb(0, 0, 255)),
        reflectiveness: 0.6
    }
}
